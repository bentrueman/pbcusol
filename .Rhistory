tibble::rowid_to_column()
phases <- database %>%  # phases start on line 3401, solution species are before
dplyr::filter(stringr::str_detect(.data$value, "PHASE")) %>%
dplyr::pull(.data$rowid)
filter_these <- c("ine", "ate", "ide", "ta", "Al", "Se", "U", "As", "B",
"Br", "F", "I", "V", "HS", "N", "Cr", "Cu", "Metal") %>%  # these will be filtered out
paste(collapse = "|")
table_leadsol <- database %>%
dplyr::filter(
.data$rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
stringr::str_detect(.data$value, "Pb") | # retain equations with Pb
(.data$rowid > phases & dplyr::lead(.data$value, 1) %>% stringr::str_detect("Pb")) | # and phase names (above equations)
dplyr::lag(.data$value, 1) %>% stringr::str_detect("Pb")  # and log K values (below equations)
) %>%
dplyr::mutate(
type = dplyr::case_when( # indicates type of data in value column
stringr::str_detect(.data$value, "=") ~ "eqn",
stringr::str_detect(.data$value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = dplyr::case_when( # reaction (solution species) or name of phase
.data$rowid < phases & .data$type == "eqn" ~ .data$value,
.data$rowid >= phases & .data$type == "phase" ~ .data$value
)
) %>%
tidyr::fill(.data$name) %>%
dplyr::filter(.data$type != "phase") %>% # remove b/c phase transferred to name column
dplyr::group_by(.data$name, .data$type) %>%
# collapses duplicate name and type combinations to same row
dplyr::summarize(data = paste(.data$value, collapse = ", ")) %>%
dplyr::select(.data$name, .data$type, .data$data) %>%
tidyr::spread(key = .data$type, value = .data$data) %>%
dplyr::filter(
!stringr::str_detect(.data$eqn, filter_these),
stringr::str_detect(.data$name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
dplyr::ungroup() %>%
dplyr::mutate(
name = dplyr::if_else(stringr::str_detect(.data$name, "ite"), .data$name, ""), # remove all but phase names from name column
log_k = stringr::str_remove(.data$log_k, "log_k ") %>% as.numeric()
) %>%
dplyr::arrange(.data$name, stringr::str_remove_all(.data$eqn, "[0-9]"))
View(table_leadsol)
database <- leadsol %>%
tibble::enframe(name = NULL) %>%
tibble::rowid_to_column()
phases <- database %>%  # phases start on line 3401, solution species are before
dplyr::filter(stringr::str_detect(.data$value, "PHASE")) %>%
dplyr::pull(.data$rowid)
filter_these <- c("ine", "ate", "ide", "ta", "Al", "Se", "U", "As", "B",
"Br", "F", "I", "V", "HS", "N", "Cr", "Cu", "Metal") %>%  # these will be filtered out
paste(collapse = "|")
table_cu2sol <- database %>%
dplyr::filter(
.data$rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
stringr::str_detect(.data$value, "Pb") | # retain equations with Pb
(.data$rowid > phases & dplyr::lead(.data$value, 1) %>% stringr::str_detect("Pb")) | # and phase names (above equations)
dplyr::lag(.data$value, 1) %>% stringr::str_detect("Pb")  # and log K values (below equations)
) %>%
dplyr::mutate(
type = dplyr::case_when( # indicates type of data in value column
stringr::str_detect(.data$value, "=") ~ "eqn",
stringr::str_detect(.data$value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = dplyr::case_when( # reaction (solution species) or name of phase
.data$rowid < phases & .data$type == "eqn" ~ .data$value,
.data$rowid >= phases & .data$type == "phase" ~ .data$value
)
) %>%
tidyr::fill(.data$name) %>%
dplyr::filter(.data$type != "phase") %>% # remove b/c phase transferred to name column
dplyr::group_by(.data$name, .data$type) %>%
# collapses duplicate name and type combinations to same row
dplyr::summarize(data = paste(.data$value, collapse = ", ")) %>%
dplyr::select(.data$name, .data$type, .data$data) %>%
tidyr::spread(key = .data$type, value = .data$data) %>%
dplyr::filter(
!stringr::str_detect(.data$eqn, filter_these),
stringr::str_detect(.data$name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
dplyr::ungroup() %>%
dplyr::mutate(
name = dplyr::if_else(stringr::str_detect(.data$name, "ite"), .data$name, ""), # remove all but phase names from name column
log_k = stringr::str_remove(.data$log_k, "log_k ") %>% as.numeric()
) %>%
dplyr::arrange(.data$name, stringr::str_remove_all(.data$eqn, "[0-9]"))
View(table_cu2sol)
database <- cu2sol %>%
tibble::enframe(name = NULL) %>%
tibble::rowid_to_column()
phases <- database %>%  # phases start on line 3401, solution species are before
dplyr::filter(stringr::str_detect(.data$value, "PHASE")) %>%
dplyr::pull(.data$rowid)
filter_these <- c("ine", "ate", "ide", "ta", "Al", "Se", "U", "As", "B",
"Br", "F", "I", "V", "HS", "N", "Cr", "Cu", "Metal") %>%  # these will be filtered out
paste(collapse = "|")
table_cu2sol <- database %>%
dplyr::filter(
.data$rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
stringr::str_detect(.data$value, "Pb") | # retain equations with Pb
(.data$rowid > phases & dplyr::lead(.data$value, 1) %>% stringr::str_detect("Pb")) | # and phase names (above equations)
dplyr::lag(.data$value, 1) %>% stringr::str_detect("Pb")  # and log K values (below equations)
) %>%
dplyr::mutate(
type = dplyr::case_when( # indicates type of data in value column
stringr::str_detect(.data$value, "=") ~ "eqn",
stringr::str_detect(.data$value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = dplyr::case_when( # reaction (solution species) or name of phase
.data$rowid < phases & .data$type == "eqn" ~ .data$value,
.data$rowid >= phases & .data$type == "phase" ~ .data$value
)
) %>%
tidyr::fill(.data$name) %>%
dplyr::filter(.data$type != "phase") %>% # remove b/c phase transferred to name column
dplyr::group_by(.data$name, .data$type) %>%
# collapses duplicate name and type combinations to same row
dplyr::summarize(data = paste(.data$value, collapse = ", ")) %>%
dplyr::select(.data$name, .data$type, .data$data) %>%
tidyr::spread(key = .data$type, value = .data$data) %>%
dplyr::filter(
!stringr::str_detect(.data$eqn, filter_these),
stringr::str_detect(.data$name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
dplyr::ungroup() %>%
dplyr::mutate(
name = dplyr::if_else(stringr::str_detect(.data$name, "ite"), .data$name, ""), # remove all but phase names from name column
log_k = stringr::str_remove(.data$log_k, "log_k ") %>% as.numeric()
) %>%
dplyr::arrange(.data$name, stringr::str_remove_all(.data$eqn, "[0-9]"))
database <- pbcu2sol %>%
tibble::enframe(name = NULL) %>%
tibble::rowid_to_column()
phases <- database %>%  # phases start on line 3401, solution species are before
dplyr::filter(stringr::str_detect(.data$value, "PHASE")) %>%
dplyr::pull(.data$rowid)
filter_these <- c("ine", "ate", "ide", "ta", "Al", "Se", "U", "As", "B",
"Br", "F", "I", "V", "HS", "N", "Cr", "Cu", "Metal") %>%  # these will be filtered out
paste(collapse = "|")
table_pbcu2sol <- database %>%
dplyr::filter(
.data$rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
stringr::str_detect(.data$value, "Pb") | # retain equations with Pb
(.data$rowid > phases & dplyr::lead(.data$value, 1) %>% stringr::str_detect("Pb")) | # and phase names (above equations)
dplyr::lag(.data$value, 1) %>% stringr::str_detect("Pb")  # and log K values (below equations)
) %>%
dplyr::mutate(
type = dplyr::case_when( # indicates type of data in value column
stringr::str_detect(.data$value, "=") ~ "eqn",
stringr::str_detect(.data$value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = dplyr::case_when( # reaction (solution species) or name of phase
.data$rowid < phases & .data$type == "eqn" ~ .data$value,
.data$rowid >= phases & .data$type == "phase" ~ .data$value
)
) %>%
tidyr::fill(.data$name) %>%
dplyr::filter(.data$type != "phase") %>% # remove b/c phase transferred to name column
dplyr::group_by(.data$name, .data$type) %>%
# collapses duplicate name and type combinations to same row
dplyr::summarize(data = paste(.data$value, collapse = ", ")) %>%
dplyr::select(.data$name, .data$type, .data$data) %>%
tidyr::spread(key = .data$type, value = .data$data) %>%
dplyr::filter(
!stringr::str_detect(.data$eqn, filter_these),
stringr::str_detect(.data$name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
dplyr::ungroup() %>%
dplyr::mutate(
name = dplyr::if_else(stringr::str_detect(.data$name, "ite"), .data$name, ""), # remove all but phase names from name column
log_k = stringr::str_remove(.data$log_k, "log_k ") %>% as.numeric()
) %>%
dplyr::arrange(.data$name, stringr::str_remove_all(.data$eqn, "[0-9]"))
View(table_pbcu2sol)
all_equal(table_leadsol, table_pbcu2sol)
pb_logk()
pb_logk() %>% write_lines("leadsol_test.txt")
pb_logk() %>% write_csv("data-raw/leadsol_test.csv")
## code to prepare `pbcu2sol` dataset goes here
library("tidyverse")
# write(pbcusol:::leadsol, "data-raw/leadsol.txt")
# write(pbcusol:::cu2sol, "data-raw/cu2sol.txt")
# leadsol <- pbcusol:::leadsol
# cu2sol <- pbcusol:::cu2sol
pbcu2sol <- read_lines("data-raw/pbcu2sol.txt")
usethis::use_data(pbcu2sol, internal = TRUE, overwrite = TRUE)
load_all()
pb_logk()
use_r("pb_logk")
document()
load_all()
use_r("pb_logk")
pb_logk()
test <- read_csv("data-raw/leadsol_test.csv")
all_equal(test, pb_logk())
test
pb_logk()
full_joini(test, pb_logk())
full_join(test, pb_logk())
full_join(test, pb_logk()) %>% View
?na_if
full_join(test, pb_logk() %>% mutate(name = na_if(name, ""))) %>% View
test %>% slice(21:23)
pb_logk() %>% slice(21:23)
full_join(test, pb_logk() %>% mutate(name = na_if(name, ""), eqn = str_trim(eqn))) %>% View
all_equal(test, pb_logk() %>% mutate(name = na_if(name, ""), eqn = str_trim(eqn)))
cu_logk()
use_r("cu_logk")
document()
load_all()
cu_logk()
use_r("pb_sol")
use_r("cu_sol")
use_r("pb_sol_fixed")
use_r("pb_sol_wham")
check()
use_r("pb_sol_fixed")
use_r("eq_sol_fixed")
document()
load_all()
?eq_sol_fixed
eq_sol_fixed(element = "Pb", ph = 6, dic = 5, phase = "Cerussite", buffer = "HCl")
package?usethis
document()
document()
?eq_sol_fixed
eq_sol_fixed(element = "Pb", ph = 6, dic = 5, phase = "Cerussite", buffer = "HCl")
pb_sol_fixed(ph = 6, dic = 5, phase = "Cerussite", buffer = "HCl")
document()
?eq_sol_fixed()
document()
?eq_sol_fixed()
cu_sol_fixed(ph = 6, dic = 5, phase = "Tenorite", buffer = "HCl")
cu_sol_fixed(ph = 9, dic = 5, phase = "Tenorite", buffer = "HCl")
use_r("eq_sol_wham")
use_r"wq_sol_wham"
use_r(eq_sol_wham)
use_r("pb_sol_wham")
document()
?eq_sol_wham
eq_sol_wham(element = "Pb", ph = 7.5, dic = 50, phase = "Cerussite", Na = 10, mass_ha = 3.5e-3)
0.00000541 * 1e6 * chemr::mass("Pb")
?pb_sol_wham
pb_sol_wham(ph = 7.5, dic = 50, phase = "Cerussite", Na = 10, mass_ha = 3.5e-3)
0.00000541 - 0.00000541
document()
?pb_sol_wham
eq_sol_wham(element = "Pb", ph = 7.5, dic = 50, phase = "Cerussite", Na = 10, mass_ha = 3.5e-3)
eq_sol_wham(element = "Cu", ph = 7.5, dic = 50, phase = "Malachite", Na = 10, mass_ha = 3.5e-3)
use_r("pb_sol")
tidyphreeqc::phr_solution_list()
tidyphreeqc::phr_solution_list("Pb" = 1)
use_r("eq_sol_fixed")
?eq_sol_fixed
pb_sol_fixed(element = "Al", ph = 6, dic = 5, phase = "Gibbsite(C)", buffer = "HCl")
documnent()
document()
document()
?pb_sol
pb_sol(ph = 7.5, dic = 5, phase = "Cerussite")
pb_sol(element = "Pb", ph = 7.5, dic = 5, phase = "Cerussite")
document()
pb_sol(element = "Pb", ph = 7.5, dic = 5, phase = "Cerussite")
document()
paste("ben")
document()
pb_sol(ph = 7.5, dic = 5, phase = "Cerussite")
pb_sol(element = "Pb", ph = 7.5, dic = 5, phase = "Cerussite")
test <- function(element = "Pb") {list(element = 1)}
test()
test <- function(element = "Pb") {list(!!element = 1)}
test <- function(element = "Pb") {list(!!element := 1)}
test
test()
document()
load_all()
pb_sol(ph = 7.5, dic = 5, phase = "Cerussite")
pb_sol(element = "Pb", ph = 7.5, dic = 5, phase = "Cerussite")
element = "Pb"
list(element = 1)
list(!!element = 1)
list(!!element)
tibble(!!element)
tibble(!!element = 1)
tibble(!!element := 1)
?list2
list2(!!element := 1)
rlang::list2(!!element := 1)
tidyphreeqc::phr_solution_list()
tidyphreeqc::phr_solution_list(element = 1)
tidyphreeqc::phr_solution_list({{element}} = 1)
tidyphreeqc::phr_solution_list({{element}} := 1)
?eval
eval(element)
tidyphreeqc::phr_solution_list("Pb" = 1)
tidyphreeqc::phr_solution_list(eval(element) = 1)
tidyphreeqc::phr_solution_list(eval(element) := 1)
tidyphreeqc::phr_solution_list(eval(element))
tidyphreeqc::phr_solution_list(eval(element) = 1)
?expr
rlang::quo(element)
rlang::enquo(element)
substitute(element)
deparse(substitute(element))
element
element %>% deparse
list(deparse(element))
list(deparse(element) = 1)
list(substitute(element) = 1)
list(substitute(element) = 1)
list(substitute(element))
list(substitute(eval(element)))
noquote(element)
list(noquote(element))
list(noquote(element) = 1)
assign(element)
?assign
assign(element, element)
assign(element, element) -> test
test
list(assign(element, 1))
eval(parse(element))
parse(element)
element
?parse
eval(element)
assign(eval(element), 1)
list(assign(eval(element), 1))
eval(parse(text = element))
eval(parse(text = paste(element)))
element
eval(parse(text = paste(element)))
tidyphreeqc::phr_solution_list()
list("Pb" = 1) %>% tidyphreeqc::phr_solution_list()
list("Pb" = 1) %>% tidyphreeqc::phr_solution_list()
tidyphreeqc::phr_solution_list(list("Pb" = 1))
?phr_solution_list
tidyphreeqc::phr_solution_list(phr_solution(.name = element))
tidyphreeqc::phr_solution_list(tiodyphreeqc::phr_solution(.name = element))
tidyphreeqc::phr_solution_list(tidyphreeqc::phr_solution(.name = element))
tidyphreeqc::phr_solution(.name = element)
tidyphreeqc::phr_solution(.name = element, 1)
tidyphreeqc::phr_solution()
tidyphreeqc::phr_solution_list(Pb = 1)
tidyphreeqc::phr_solution_list(element = 1)
tidyphreeqc::phr_solution_list(eval(element) = 1)
tidyphreeqc::phr_solution_list(eval(element))
tidyphreeqc::phr_solution_list("Pb")
f <- function(...) {
out <- list2(...)
rev(out)
}
f
f(element)
library("rlang")
library("rlang")
f(element)
f(!!element := element)
eval(parse(text = element))
eval(parse(text = eval(element)))
eval(parse(text = paste(element))
eval(parse(text = paste(element)))
element
eval(parse(text = "Pb = 1")
eval(parse(text = "Pb = 1"))
Pb
rm(list = ls())
eval(parse(text = "Pb = 1"))
tidyphreeqc::phr_solution_list(eval(parse(text = "Pb = 1")))
parse(text = "Pb = 1")
parse(text = "Pb = 1") %>% tidyphreeqc::phr_solution_list()
test <- function(...) args(...)
test(Pb = 1)
test <- function(...) {args <- list(...)}
test(Pb = 1)
test <- function(...) {list(...)}
test(Pb = 1)
test <- function(...) {ars <- list(...); tidyphreeqc::phr_solution_list(args)}
test(Pb = 1)
test <- function(...) {ars <- list(...); do.call(tidyphreeqc::phr_solution_list, args)}
test(Pb = 1)
test <- function(...) {ars <- list(...); do.call(tidyphreeqc::phr_solution_list)}
test
test()
test(Pb= 1)
do.call(tidyphreeqc::phr_solution_list)
do.call(tidyphreeqc::phr_solution_list, list(Pb = 1))
do.call(tidyphreeqc::phr_solution_list, list2(!!element := 1))
element
element = "Pb"
list2(!!element := 1)
do.call(tidyphreeqc::phr_solution_list, list2(!!element := 1))
do.call(tidyphreeqc::phr_solution_list, list2(!!element := "1 Cerussite 0"))
do.call(tidyphreeqc::phr_solution_list, list2(!!element := "1 Cerussite 0", C = dic / chemr::mass("C")))
do.call(tidyphreeqc::phr_solution_list, list2(!!element := "1 Cerussite 0", C = 5 / chemr::mass("C")))
do.call(tidyphreeqc::phr_solution_list, list2(!!element := "1 Cerussite 0", C = 5 / chemr::mass("C"), units = "mmol/l"))
document()
load_all()
?pb_sol
pb_sol(ph = 7.5, dic = 5, phase = "Cerussite")
pb_sol(element = "Pb", ph = 7.5, dic = 5, phase = "Cerussite")
pb_sol(element = "Cu", ph = 7.5, dic = 5, phase = "Malachite")
pb_sol(element = "Cu", ph = 7.5, dic = 5, phase = "Malachite", Ca = 100 / chemr::mass("Ca"))
pb_sol(element = "Cu", ph = 7.5, dic = 5, phase = "Malachite", Mg = 100 / chemr::mass("Mg"))
pb_sol(element = "Cu", ph = 7.5, dic = 5, phase = "Malachite", Ca = 100 / chemr::mass("Ca"), Mg = 100 / chemr::mass("Mg"))
pb_sol(element = "Cu", ph = 7.5, dic = 5, phase = "Malachite", Ca = 100 / chemr::mass("Ca"))
use_r("eq_sol_fixed")
use_r("eq_sol")
use_r("eq_sol")
document()
?cu_sol
?cu_sol
document()
?eq_sol
document()
?eq_sol
eq_sol(element = "Pb", ph = 7.5, dic = 5, phase = "Cerussite")
eq_sol(element = "Pb", ph = 7.5, dic = 5, db = phreeqc::minteq.v4.dat, phase = "Cerussite")
cu_sol(ph = 7.5, dic = 5, phase = "Tenorite")
cu_sol(ph = 7.5, dic = 5, db = phreeqc::minteq.v4.dat, phase = "Tenorite")
cu_sol(7.5, 5, phosphate = 1, empirical = TRUE)
"eq_sol_wham" %>% use_r()
document()
?eq_sol
cu_sol(7.5, 5, phosphate = 1, empirical = TRUE)
document()
load_all()
?eq_sol
cu_sol(7.5, 5, phosphate = 1, empirical = TRUE)
cu_sol
pb_sol(7.5, 5, phosphate = 1, phase = "Cerussite")
cu_sol(7.5, 5, phosphate = 1, phase = "Tenorite")
document()
load_all()
?eq_sol
eq_sol(element = "Pb", ph = 7.5, dic = 5, phase = "Cerussite")
eq_sol(element = "Pb", ph = 7.5, dic = 5, db = phreeqc::minteq.v4.dat, phase = "Cerussite")
cu_sol(ph = 7.5, dic = 5, phase = "Tenorite")
cu_sol(ph = 7.5, dic = 5, db = phreeqc::minteq.v4.dat, phase = "Tenorite")
cu_sol(7.5, 5, phosphate = 1, empirical = TRUE)
pb_sol_fixed(9.5, 5, 0, "Hydcerussite")
use_r("eq_sol_fixed")
document()
load_all()
pb_sol_fixed(9.5, 5, 0, "Hydcerussite")
pb_sol(9.5, 5, 0, "Hydcerussite")
pb_sol(9.5, 5, 0, phase = "Hydcerussite")
check()
use_r("eq_sol")
library(devtools)
load_all()
?eq_sol
cu_sol(ph = 7.5, dic = 5, phase = "Tenorite")
document()
check()
?cu_sol
use_r("eq_sol")
document()
load_all()
?eq_sol
eq_sol(element = "Pb", ph = 7.5, dic = 5, phase = "Cerussite")
eq_sol(element = "Pb", ph = 7.5, dic = 5, db = phreeqc::minteq.v4.dat, phase = "Cerussite")
eq_sol(element = "Cu", ph = 7.5, dic = 5, phase = "Tenorite")
eq_sol(element = "Cu", ph = 7.5, dic = 5, db = phreeqc::minteq.v4.dat, phase = "Tenorite")
eq_sol(element = "Cu", 7.5, 5, phosphate = 1, empirical = TRUE)
document()
check()
build_readme()
?cu_sol()
?eq_sol
document()
document()
use_r("cu_sol")
use_r("pb_sol")
document()
?pb_sol
build_readme()
cu_sol()
pb_sol(element = "Pb", ph = 7.5, dic = 5, phase = "Cerussite")
build_readme()
.Last.error.trace
document()
document()
cu_sol
cu_sol()
check()
use_r("cu_sol")
document()
check()
use_r("cu_sol")
document()
check()
document()
cu_sol(7, 5, "Tenorite")
cu_sol(7, 5, phase = "Tenorite")
cu_sol(9, 5, phase = "Tenorite")
use_r("eq_sol")
document()
?eq_sol
check()
document()
check()
document()
check()
build_readme()
?pb_sol
use_r("eq_sol")
document()
check()
