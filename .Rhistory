document()
?cu_sol
document()
?cu_sol
cu_sol(7.5, 5, empirical = TRUE)
cu_sol(7.5, 5, p = 1, empirical = TRUE)
cu_sol(7.5, 5, phosphate = 1, empirical = TRUE)
cu_sol(7.5, 5, phosphate = 2, empirical = TRUE)
cu_sol(7.5, 5, phosphate = 3, empirical = TRUE)
cu_sol(7.5, 5, phosphate = 1, empirical = TRUE)
cu_sol
1 * 2^2
2 * 2^2
(2 * 2)^2
check()
build_readme()
use_r("cu_sol")
document()
cu_sol(ph = 7.5, dic = 5, phase = "Tenorite")
document()
cu_sol(ph = 7.5, dic = 5, phase = "Tenorite")
use_r("pb_sol")
document()
pb_sol(ph = 7.5, dic = 5, phase = "Cerussite")
pb_sol(ph = 7.5, dic = 5, phosphate = 1, phase = "Cerussite")
pb_sol(ph = 7.5, dic = 5, phosphate = 1, phase = "Hxypyromorphite")
pb_sol(ph = 7.5, dic = 5, phosphate = .16, phase = "Hxypyromorphite")
check()
build_readme()
library(devtools)
use_r("pb_logk")
db
db <- leadsol
library(pbcusol)
db <- leadsol
ladsol
db <- pbcusol:::leadsol
database <- db %>%
enframe(name = NULL) %>%
rowid_to_column() %>%
mutate(rowid = as.numeric(rowid))
library("tidyverse")
database <- db %>%
enframe(name = NULL) %>%
rowid_to_column() %>%
mutate(rowid = as.numeric(rowid))
phases <- database %>%  # phases start on line 3401, solution species are before
filter(str_detect(value, "PHASE")) %>%
pull(rowid)
phases
database <- db %>%
enframe(name = NULL) %>%
rowid_to_column()
phases <- database %>%  # phases start on line 3401, solution species are before
filter(str_detect(value, "PHASE")) %>%
pull(rowid)
filter_these <- c("ine", "ate", "ide", "ta", "Al", "Se", "U", "As", "B",
"Br", "F", "I", "V", "HS", "N", "Cr", "Cu", "Metal") %>%  # these will be filtered out
paste(collapse = "|")
table_1 <- database %>%
filter(
rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
str_detect(value, "Pb") | # retain equations with Pb
(rowid > phases & lead(value, 1) %>% str_detect("Pb")) | # and phase names (above equations)
lag(value, 1) %>% str_detect("Pb")  # and log K values (below equations)
) %>%
mutate(
type = case_when( # indicates type of data in value column
str_detect(value, "=") ~ "eqn",
str_detect(value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = case_when( # reaction (solution species) or name of phase
rowid < phases & type == "eqn" ~ value,
rowid >= phases & type == "phase" ~ value
)
) %>%
fill(name) %>%
filter(type != "phase") %>% # remove b/c phase transferred to name column
group_by(name, type) %>%
# collapses duplicate name and type combinations to same row
summarize(data = paste(value, collapse = ", ")) %>%
select(name, type, data) %>%
spread(key = type, value = data) %>%
filter(
!str_detect(eqn, filter_these),
str_detect(name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
ungroup() %>%
mutate(
name = str_detect(name, "ite") %>% if_else(., name, ""), # remove all but phase names from name column
log_k = str_remove(log_k, "log_k ") %>% as.numeric()
) %>%
rename(
Phase = name,
Equation = eqn,
`log K` = log_k
) %>%
arrange(Phase, Equation %>% str_remove_all("[0-9]"))
table_1 <- database %>%
filter(
rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
str_detect(value, "Pb") | # retain equations with Pb
(rowid > phases & lead(value, 1) %>% str_detect("Pb")) | # and phase names (above equations)
lag(value, 1) %>% str_detect("Pb")  # and log K values (below equations)
) %>%
mutate(
type = case_when( # indicates type of data in value column
str_detect(value, "=") ~ "eqn",
str_detect(value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = case_when( # reaction (solution species) or name of phase
rowid < phases & type == "eqn" ~ value,
rowid >= phases & type == "phase" ~ value
)
) %>%
fill(name) %>%
filter(type != "phase") %>% # remove b/c phase transferred to name column
group_by(name, type) %>%
# collapses duplicate name and type combinations to same row
summarize(data = paste(value, collapse = ", ")) %>%
select(name, type, data) %>%
spread(key = type, value = data) %>%
filter(
!str_detect(eqn, filter_these),
str_detect(name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
ungroup() %>%
mutate(
name = str_detect(name, "ite") %>% if_else(., name, ""), # remove all but phase names from name column
log_k = str_remove(log_k, "log_k ") %>% as.numeric()
) %>%
rename(
Phase = name,
Equation = eqn,
`log K` = log_k
) %>%
arrange(Phase, Equation %>% str_remove_all("[0-9]")) %>%
mutate(
Equation = str_replace_all(Equation, "(\\+\\d)", "^\\1^") %>% # superscript charges
str_replace_all("(\\-\\d)", "^\\1^") %>% # superscript charges
str_replace_all("(\\w)(\\+)", "\\1^\\2^") %>% # superscript charges
str_replace_all("(\\w)(\\-)", "\\1^\\2^") %>% # superscript charges
str_replace_all("(\\))(\\d)", "\\1~\\2~") %>% # subscripts in formulas
str_replace_all("(\\w)(\\d)", "\\1~\\2~"), # subscripts in formulas
Phase = case_when(
Phase == "Hxypyromorphite" ~ "Hydroxylpyromorphite",
Phase == "Hydcerussite" ~ "Hydrocerussite",
TRUE ~ Phase
)
) %>%
filter(Equation != "Pb^+2^ = Pb^+2^") %>%
slice(15, 8:10, 14, 11:13, 7, 6, 5, 16, 17, 19, 18, 4, 1:3, 20, 22, 21)
database %>%
filter(
rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
str_detect(value, "Pb") | # retain equations with Pb
(rowid > phases & lead(value, 1) %>% str_detect("Pb")) | # and phase names (above equations)
lag(value, 1) %>% str_detect("Pb")  # and log K values (below equations)
) %>%
mutate(
type = case_when( # indicates type of data in value column
str_detect(value, "=") ~ "eqn",
str_detect(value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = case_when( # reaction (solution species) or name of phase
rowid < phases & type == "eqn" ~ value,
rowid >= phases & type == "phase" ~ value
)
) %>%
fill(name) %>%
filter(type != "phase") %>% # remove b/c phase transferred to name column
group_by(name, type) %>%
# collapses duplicate name and type combinations to same row
summarize(data = paste(value, collapse = ", ")) %>%
select(name, type, data) %>%
spread(key = type, value = data) %>%
filter(
!str_detect(eqn, filter_these),
str_detect(name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
ungroup() %>%
mutate(
name = str_detect(name, "ite") %>% if_else(., name, ""), # remove all but phase names from name column
log_k = str_remove(log_k, "log_k ") %>% as.numeric()
) %>%
rename(
Phase = name,
Equation = eqn,
`log K` = log_k
) %>%
arrange(Phase, Equation %>% str_remove_all("[0-9]")) %>%
mutate(
Equation = str_replace_all(Equation, "(\\+\\d)", "^\\1^") %>% # superscript charges
str_replace_all("(\\-\\d)", "^\\1^") %>% # superscript charges
str_replace_all("(\\w)(\\+)", "\\1^\\2^") %>% # superscript charges
str_replace_all("(\\w)(\\-)", "\\1^\\2^") %>% # superscript charges
str_replace_all("(\\))(\\d)", "\\1~\\2~") %>% # subscripts in formulas
str_replace_all("(\\w)(\\d)", "\\1~\\2~"), # subscripts in formulas
Phase = case_when(
Phase == "Hxypyromorphite" ~ "Hydroxylpyromorphite",
Phase == "Hydcerussite" ~ "Hydrocerussite",
TRUE ~ Phase
)
) %>%
filter(Equation != "Pb^+2^ = Pb^+2^") %>%
slice(15, 8:10, 14, 11:13, 7, 6, 5, 16, 17, 19, 18, 4, 1:3, 20, 22, 21)
database %>%
filter(
rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
str_detect(value, "Pb") | # retain equations with Pb
(rowid > phases & lead(value, 1) %>% str_detect("Pb")) | # and phase names (above equations)
lag(value, 1) %>% str_detect("Pb")  # and log K values (below equations)
) %>%
mutate(
type = case_when( # indicates type of data in value column
str_detect(value, "=") ~ "eqn",
str_detect(value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = case_when( # reaction (solution species) or name of phase
rowid < phases & type == "eqn" ~ value,
rowid >= phases & type == "phase" ~ value
)
) %>%
fill(name) %>%
filter(type != "phase") %>% # remove b/c phase transferred to name column
group_by(name, type) %>%
# collapses duplicate name and type combinations to same row
summarize(data = paste(value, collapse = ", ")) %>%
select(name, type, data) %>%
spread(key = type, value = data) %>%
filter(
!str_detect(eqn, filter_these),
str_detect(name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
ungroup() %>%
mutate(
name = str_detect(name, "ite") %>% if_else(., name, ""), # remove all but phase names from name column
log_k = str_remove(log_k, "log_k ") %>% as.numeric()
) %>%
rename(
Phase = name,
Equation = eqn,
`log K` = log_k
) %>%
arrange(Phase, Equation %>% str_remove_all("[0-9]")) %>%
mutate(
Equation = str_replace_all(Equation, "(\\+\\d)", "^\\1^") %>% # superscript charges
str_replace_all("(\\-\\d)", "^\\1^") %>% # superscript charges
str_replace_all("(\\w)(\\+)", "\\1^\\2^") %>% # superscript charges
str_replace_all("(\\w)(\\-)", "\\1^\\2^") %>% # superscript charges
str_replace_all("(\\))(\\d)", "\\1~\\2~") %>% # subscripts in formulas
str_replace_all("(\\w)(\\d)", "\\1~\\2~"), # subscripts in formulas
Phase = case_when(
Phase == "Hxypyromorphite" ~ "Hydroxylpyromorphite",
Phase == "Hydcerussite" ~ "Hydrocerussite",
TRUE ~ Phase
)
) %>%
filter(Equation != "Pb^+2^ = Pb^+2^") %>%
slice(15, 8:10, 14, 11:13, 7, 6, 5, 16, 17, 19, 18, 4, 1:3, 20, 22, 21) %>% View()
c(15, 8:10, 14, 11:13, 7, 6, 5, 16, 17, 19, 18, 4, 1:3, 20, 22, 21)
c(15, 8:10, 14, 11:13, 7, 6, 5, 16, 17, 19, 18, 4, 1:3, 20, 22, 21) %>% order
c(15, 8:10, 14, 11:13, 7, 6, 5, 16, 17, 19, 18, 4, 1:3, 20, 22, 21) %>% sort
c(15, 8:10, 14, 11:13, 7, 6, 5, 16, 17, 19, 18, 4, 1:3, 20, 22, 21) %>% sort() %>% diff()
c(15, 8:10, 14, 11:13, 7, 6, 5, 16, 17, 19, 18, 4, 1:3, 20, 22, 21) %>% sort() %>% length()
database %>%
filter(
rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
str_detect(value, "Pb") | # retain equations with Pb
(rowid > phases & lead(value, 1) %>% str_detect("Pb")) | # and phase names (above equations)
lag(value, 1) %>% str_detect("Pb")  # and log K values (below equations)
) %>%
mutate(
type = case_when( # indicates type of data in value column
str_detect(value, "=") ~ "eqn",
str_detect(value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = case_when( # reaction (solution species) or name of phase
rowid < phases & type == "eqn" ~ value,
rowid >= phases & type == "phase" ~ value
)
) %>%
fill(name) %>%
filter(type != "phase") %>% # remove b/c phase transferred to name column
group_by(name, type) %>%
# collapses duplicate name and type combinations to same row
summarize(data = paste(value, collapse = ", ")) %>%
select(name, type, data) %>%
spread(key = type, value = data) %>%
filter(
!str_detect(eqn, filter_these),
str_detect(name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
ungroup() %>%
mutate(
name = str_detect(name, "ite") %>% if_else(., name, ""), # remove all but phase names from name column
log_k = str_remove(log_k, "log_k ") %>% as.numeric()
) %>%
rename(
Phase = name,
Equation = eqn,
`log K` = log_k
) %>%
arrange(Phase, Equation %>% str_remove_all("[0-9]"))
database %>%
filter(
rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
str_detect(value, "Pb") | # retain equations with Pb
(rowid > phases & lead(value, 1) %>% str_detect("Pb")) | # and phase names (above equations)
lag(value, 1) %>% str_detect("Pb")  # and log K values (below equations)
) %>%
mutate(
type = case_when( # indicates type of data in value column
str_detect(value, "=") ~ "eqn",
str_detect(value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = case_when( # reaction (solution species) or name of phase
rowid < phases & type == "eqn" ~ value,
rowid >= phases & type == "phase" ~ value
)
) %>%
fill(name) %>%
filter(type != "phase") %>% # remove b/c phase transferred to name column
group_by(name, type) %>%
# collapses duplicate name and type combinations to same row
summarize(data = paste(value, collapse = ", ")) %>%
select(name, type, data) %>%
spread(key = type, value = data) %>%
filter(
!str_detect(eqn, filter_these),
str_detect(name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
ungroup() %>%
mutate(
name = str_detect(name, "ite") %>% if_else(., name, ""), # remove all but phase names from name column
log_k = str_remove(log_k, "log_k ") %>% as.numeric()
) %>%
rename(
Phase = name,
Equation = eqn,
`log K` = log_k
) %>%
arrange(Phase, Equation %>% str_remove_all("[0-9]")) %>% View
?enframe
?rowid_to_column
use_package("stringr")
?case_when
?fill
?spread
table <- database %>%
dplyr::filter(
rowid > 148, # solution reactions start on line 149, lines 1 - 148 are essential definitions
stringr::str_detect(value, "Pb") | # retain equations with Pb
(rowid > phases & lead(value, 1) %>% stringr::str_detect("Pb")) | # and phase names (above equations)
lag(value, 1) %>% stringr::str_detect("Pb")  # and log K values (below equations)
) %>%
dplyr::mutate(
type = dplyr::case_when( # indicates type of data in value column
stringr::str_detect(value, "=") ~ "eqn",
stringr::str_detect(value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = dplyr::case_when( # reaction (solution species) or name of phase
rowid < phases & type == "eqn" ~ value,
rowid >= phases & type == "phase" ~ value
)
) %>%
tidyr::fill(name) %>%
dplyr::filter(type != "phase") %>% # remove b/c phase transferred to name column
dplyr::group_by(name, type) %>%
# collapses duplicate name and type combinations to same row
dplyr::summarize(data = paste(value, collapse = ", ")) %>%
dplyr::select(name, type, data) %>%
tidyr::spread(key = type, value = data) %>%
dplyr::filter(
!stringr::str_detect(eqn, filter_these),
stringr::str_detect(name, c("Cerussite", "Hydcerussite", "Hxypyromorphite", "=") %>% paste(collapse = "|"))
) %>%
dplyr::ungroup() %>%
dplyr::mutate(
name = stringr::str_detect(name, "ite") %>% if_else(., name, ""), # remove all but phase names from name column
log_k = stringr::str_remove(log_k, "log_k ") %>% as.numeric()
) %>%
rename(
Phase = name,
Equation = eqn,
`log K` = log_k
) %>%
arrange(Phase, Equation %>% str_remove_all("[0-9]"))
?arrange
document()
check()
?lead
document()
?pb_logk
pb_logk()
check()
pb_logk(db = phreeqc::minteq.v4.dat)
document()
check()
pb_logk()
pb_logk(kable_format = TRUE)
use_r("cu_logk")
?fill
?spread
?ifelse
document()
check()
document()
cu_logk()
document()
cu_logk()
str_detect("\", "\\\)
str_detect("\", "\\\")
str_detect("\", "")
str_detect("\t", "")
str_detect("\", "")
str_detect("\t\tlog_k\t2.7", "")
str_detect("\t\tlog_k\t2.7", "\t")
str_detect("\t\tlog_k\t2.7", "^\t")
str_remove("\t\tlog_k\t2.7", "^\t")
str_remove("\t\tlog_k\t2.7", "^\\t")
str_remove("\t\tlog_k\t2.7", "^\\\t")
str_remove("\t\tlog_k\t2.7", "\\\t")
str_remove_all("\t\tlog_k\t2.7", "\t")
str_remove_all("\t\tlog_k\t2.7", "\t")
str_remove_all("\t\tlog_k\t2.7", "\t|log_k")
document()
cu_logk
cu_logk()
document()
cu_logk()
document()
cu_logk()
?str_trim
document()
?str_trim
cu_logk()
cu_logk() %>% View
check()
?use_r("cu_logk")
use_r("cu_logk")
document()
check()
library(pbcusol)
cu_logk()
devtools()
library(devtools)
load_all()
cu_logk()
cu_logk() %>% View
cu_logk()
cu_logk
database <- cu2sol %>%
tibble::enframe(name = NULL) %>%
tibble::rowid_to_column()
phases <- database %>%  # phases start on line 3437, solution species are before
dplyr::filter(stringr::str_detect(.data$value, "PHASE")) %>%
dplyr::pull(.data$rowid)
filter_these <- c("ine", "ate", "ide", "ta", "Al", "Se", "U", "As", "B", "Br",
"F", "I", "V", "HS", "Cr", "Sb", "Pb", "Si") %>%
paste(collapse = "|")
table <- database %>%
dplyr::filter(
.data$rowid > 152, # solution reactions start on line 152, lines 1 - 151are essential definitions
stringr::str_detect(.data$value, "Cu") | # retain equations with Cu
(.data$rowid > phases & dplyr::lead(.data$value, 1) %>% stringr::str_detect("Cu")) | # and phase names (above equations)
dplyr::lag(.data$value, 1) %>% stringr::str_detect("Cu")  # and log K values (below equations)
) %>%
dplyr::mutate(
type = dplyr::case_when( # indicates type of data in value column
stringr::str_detect(.data$value, "=") ~ "eqn",
stringr::str_detect(.data$value, "log_k") ~ "log_k",
TRUE ~ "phase"
),
name = dplyr::case_when( # reaction (solution species) or name of phase
.data$rowid < phases & .data$type == "eqn" ~ .data$value,
.data$rowid >= phases & .data$type == "phase" ~ .data$value
)
) %>%
tidyr::fill(.data$name) %>%
dplyr::filter(.data$type != "phase") %>% # remove b/c phase transferred to name column
dplyr::group_by(.data$name, .data$type) %>%
# collapses duplicate name and type combinations to same row
dplyr::summarize(data = paste(.data$value, collapse = ", ")) %>%
dplyr::select(.data$name, .data$type, .data$data) %>%
tidyr::spread(key = .data$type, value = .data$data) %>%
dplyr::filter(!stringr::str_detect(.data$eqn, filter_these)) %>%
dplyr::ungroup() %>%
dplyr::mutate(
log_k = stringr::str_remove_all(.data$log_k, "\t|log_k") %>% stringr::str_trim(side = "both"),
name = ifelse(stringr::str_detect(.data$name, "="), "", .data$name)
) %>%
dplyr::arrange(.data$name, stringr::str_remove_all(.data$eqn, "[0-9]"))
View(table)
use_r("cu_logk")
document()
check()
cu_logk() %>% View
head(phreeqc::minteq.dat)
load_all()
pb_logk()
pb_logk() %>% View
cu_logk()
cu_logk() %>% View
build_readme()
